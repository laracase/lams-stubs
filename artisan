#!/usr/bin/env php
<?php

use Illuminate\Contracts\Console\Kernel;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Layer\Base\Kernel\Console;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
*/
require __DIR__.'/../../vendor/autoload.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/
/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
*/
putenv('APP_PACKAGES_CACHE=storage/cache/packages.php');
putenv('APP_SERVICES_CACHE=storage/cache/services.php');

$app = new Layer\Base\App(__DIR__);

/*
|--------------------------------------------------------------------------
| Bind Important Interfaces
|--------------------------------------------------------------------------
*/
$app->register(Layer\Base\Providers\AppServiceProvider::class);

/** @var Console $kernel */
$kernel = $app->make(Kernel::class);

$status = $kernel->handle($input = new ArgvInput, new ConsoleOutput);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
